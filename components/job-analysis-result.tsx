"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { AlertTriangle, CheckCircle, AlertCircle, TrendingUp, Copy } from "lucide-react"
import { Button } from "@/components/ui/button"
import { useToast } from "@/hooks/use-toast"

interface JobAnalysisResultProps {
  result: {
    isScam: boolean
    confidence: number
    riskScore: number
    scamKeywords: string[]
    legitimateIndicators: string[]
    companyFlags: string[]
    explanation: string
  }
}

export function JobAnalysisResult({ result }: JobAnalysisResultProps) {
  const { toast } = useToast()

  const getStatusColor = () => {
    if (result.riskScore >= 70) return "destructive"
    if (result.riskScore >= 40) return "secondary"
    return "default"
  }

  const getStatusIcon = () => {
    if (result.riskScore >= 70) return <AlertTriangle className="h-5 w-5" />
    if (result.riskScore >= 40) return <AlertCircle className="h-5 w-5" />
    return <CheckCircle className="h-5 w-5" />
  }

  const getStatusText = () => {
    if (result.riskScore >= 70) return "High Risk - Likely Scam"
    if (result.riskScore >= 40) return "Medium Risk - Use Caution"
    return "Low Risk - Appears Legitimate"
  }

  const copyResults = () => {
    const summary = `Job Scam Analysis Results:
Status: ${getStatusText()}
Risk Score: ${result.riskScore}/100
Confidence: ${result.confidence}%

${result.explanation}

Generated by Job Scam Detector AI`

    navigator.clipboard.writeText(summary)
    toast({
      title: "Results copied!",
      description: "Analysis summary copied to clipboard",
    })
  }

  return (
    <div className="space-y-6">
      {/* Main Result Card */}
      <Card
        className={`border-2 ${
          result.riskScore >= 70
            ? "border-destructive/50 bg-destructive/5"
            : result.riskScore >= 40
              ? "border-yellow-500/50 bg-yellow-500/5"
              : "border-primary/50 bg-primary/5"
        }`}
      >
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              {getStatusIcon()}
              Analysis Complete
            </CardTitle>
            <Button variant="outline" size="sm" onClick={copyResults}>
              <Copy className="h-4 w-4 mr-2" />
              Copy Results
            </Button>
          </div>
          <CardDescription>AI-powered analysis of the job posting</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <Badge variant={getStatusColor()} className="text-sm px-3 py-1">
              {getStatusText()}
            </Badge>
            <div className="text-right">
              <div className="text-2xl font-bold">{result.confidence}%</div>
              <div className="text-sm text-muted-foreground">Confidence</div>
            </div>
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>Risk Score</span>
              <span className="font-medium">{result.riskScore}/100</span>
            </div>
            <Progress
              value={result.riskScore}
              className={`h-3 ${
                result.riskScore >= 70
                  ? "[&>div]:bg-destructive"
                  : result.riskScore >= 40
                    ? "[&>div]:bg-yellow-500"
                    : "[&>div]:bg-primary"
              }`}
            />
          </div>

          <div
            className={`p-3 rounded-lg border ${
              result.riskScore >= 70
                ? "bg-destructive/10 border-destructive/20"
                : result.riskScore >= 40
                  ? "bg-yellow-500/10 border-yellow-500/20"
                  : "bg-primary/10 border-primary/20"
            }`}
          >
            <div className="text-sm font-medium mb-1">
              {result.riskScore >= 70
                ? "⚠️ Strong Recommendation"
                : result.riskScore >= 40
                  ? "⚡ Proceed with Caution"
                  : "✅ Generally Safe"}
            </div>
            <div className="text-sm text-muted-foreground">
              {result.riskScore >= 70
                ? "Avoid this opportunity. Do not share personal information or make payments."
                : result.riskScore >= 40
                  ? "Research the company thoroughly before proceeding. Verify all details independently."
                  : "This appears legitimate, but always verify company details before sharing sensitive information."}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Detailed Analysis */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5" />
            Detailed Analysis
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Scam Indicators */}
          {result.scamKeywords.length > 0 && (
            <div>
              <h4 className="font-medium text-destructive mb-3 flex items-center gap-2">
                <AlertTriangle className="h-4 w-4" />
                Scam Indicators Found ({result.scamKeywords.length})
              </h4>
              <div className="flex flex-wrap gap-2">
                {result.scamKeywords.map((keyword, index) => (
                  <Badge key={index} variant="destructive" className="text-xs">
                    {keyword}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Legitimate Indicators */}
          {result.legitimateIndicators.length > 0 && (
            <div>
              <h4 className="font-medium text-primary mb-3 flex items-center gap-2">
                <CheckCircle className="h-4 w-4" />
                Positive Indicators ({result.legitimateIndicators.length})
              </h4>
              <div className="flex flex-wrap gap-2">
                {result.legitimateIndicators.map((indicator, index) => (
                  <Badge key={index} variant="secondary" className="text-xs">
                    {indicator}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Company Flags */}
          {result.companyFlags.length > 0 && (
            <div>
              <h4 className="font-medium text-yellow-600 mb-3 flex items-center gap-2">
                <AlertCircle className="h-4 w-4" />
                Company Analysis ({result.companyFlags.length})
              </h4>
              <div className="flex flex-wrap gap-2">
                {result.companyFlags.map((flag, index) => (
                  <Badge key={index} variant="outline" className="text-xs">
                    {flag}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {/* Explanation */}
          <div>
            <h4 className="font-medium mb-3">Why This Result?</h4>
            <p className="text-sm text-muted-foreground leading-relaxed">{result.explanation}</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
